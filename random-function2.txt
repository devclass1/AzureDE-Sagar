# Pyspark random sample through
# sample function with fraction and seed as arguments

# Import the SparkSession library
from pyspark.sql import SparkSession

# Create a spark session using getOrCreate() function
spark_session = SparkSession.builder.getOrCreate()

# Read the CSV file
data_frame=csv_file = spark_session.read.csv('dbfs:/FileStore/tables/student_data1.csv',
							sep = ',', inferSchema = True, header = True)

# Extract random sample through sample function
# using seed and fraction as arguments
data_frame.sample(0.4,26).collect()

# Again extract random sample through sample function using seed and
# fraction as arguments to check if we get same output each time
data_frame.sample(0.4,26).collect()


##################
Notes
#################

In PySpark, the sample method is used to generate a random sample of data from a DataFrame. The method takes two arguments: the first argument is the fraction of the DataFrame that should be sampled, and the second argument is the seed used to initialize the random number generator.

The seed value is used to ensure that the random sample generated is reproducible. In other words, if you use the same seed value, you will get the same random sample every time you run the code. This can be useful for debugging and testing purposes.

In the given example, sample(0.4, 26) means that 40% of the DataFrame will be randomly selected using a seed value of 26. The collect method is then used to retrieve the sampled data as a list in the driver program, just as in the previous example.

#########
What is seed here
#########

In PySpark, a seed is a value that is used to initialize the random number generator. The random number generator uses the seed to generate a sequence of pseudo-random numbers.

Pseudo-random numbers are a sequence of numbers that appear to be random, but are generated by an algorithm. The sequence is deterministic, which means that given the same seed value, the same sequence of pseudo-random numbers will be generated every time.

In PySpark, the random function and the sample method are examples of functions that use a seed to initialize the random number generator. By default, the seed value used is the system clock, but you can also specify your own seed value by passing it as an argument to the function or method.

Using a fixed seed value can be useful for debugging and testing purposes because it ensures that the same sequence of pseudo-random numbers is generated every time the code is run. This can help to make the code more predictable and easier to debu
